datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  email         String       @unique
  name          String?
  password      String
  role          String       @default("user")
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  settings      UserSettings?
  alertRules    AlertRule[]
  strategies    Strategy[]
  trades        Trade[]
  performanceMetrics PerformanceMetrics[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model UserSettings {
  id               String  @id @default(cuid())
  userId           String  @unique
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  openaiApiKey     String?
  openaiOrganization String?
  openaiProjectId  String?
  tradingViewApiKey String?
  telegramBotToken String?
  updatedAt        DateTime @updatedAt
}

model AlertRule {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  coin        String
  condition   String
  threshold   Float
  channels    String[] // ["chat", "email", "telegram"]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Strategy {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  description String?
  conditions  Json     // Array of conditions
  coins      String[] // Array of coin symbols
  isActive    Boolean  @default(true)
  trades      Trade[]
  metrics     PerformanceMetrics[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId, createdAt])
}

model ExternalData {
  id          String   @id @default(cuid())
  source      String   // "dexscreener", "birdeye", "twitter"
  data        Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([source, createdAt])
}

model MarketData {
  id          String   @id @default(cuid())
  symbol      String
  price       Float
  volume      Float
  timestamp   DateTime
  source      String   // "binance", "coinbase", etc.
  createdAt   DateTime @default(now())

  @@index([symbol, timestamp])
  @@index([source, timestamp])
}

model Trade {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategyId  String?
  strategy    Strategy? @relation(fields: [strategyId], references: [id])
  symbol      String
  type        String   // "BUY" or "SELL"
  amount      Float
  price       Float
  totalValue  Float
  status      String   // "PENDING", "COMPLETED", "CANCELLED"
  executedAt  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId, executedAt])
  @@index([strategyId, executedAt])
  @@index([symbol, executedAt])
}

model PerformanceMetrics {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  strategyId  String?
  strategy    Strategy? @relation(fields: [strategyId], references: [id])
  period      String   // "DAILY", "WEEKLY", "MONTHLY", "YEARLY"
  startDate   DateTime
  endDate     DateTime
  totalTrades Int
  winRate     Float
  profitLoss  Float
  sharpeRatio Float?
  maxDrawdown Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId, period, startDate])
  @@index([strategyId, period, startDate])
} 