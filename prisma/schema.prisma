generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String               @id @default(cuid())
  email              String               @unique
  name               String?
  password           String
  role               String               @default("user")
  emailVerified      DateTime?
  image              String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  accounts           Account[]
  alertRules         AlertRule[]
  performanceMetrics PerformanceMetrics[]
  sessions           Session[]
  strategies         Strategy[]
  trades             Trade[]
  settings           UserSettings?
  chatLogs           ChatLog[]
  messages           Message[]
}

model UserSettings {
  id                 String   @id @default(cuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  openaiApiKey       String?
  openaiOrganization String?
  openaiProjectId    String?
  openaiModel        String?  @default("gpt-3.5-turbo")
  tradingViewApiKey  String?
  telegramBotToken   String?
  updatedAt          DateTime @updatedAt
}

model ChatLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  input     String   @db.Text
  output    String   @db.Text
  model     String
  timestamp DateTime @default(now())

  @@index([userId, timestamp])
}

model AlertRule {
  id        String   @id @default(cuid())
  userId    String
  coin      String
  condition String
  threshold Float
  channels  String[]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Strategy {
  id          String               @id @default(cuid())
  userId      String
  name        String
  description String?
  conditions  Json
  coins       String[]
  isActive    Boolean              @default(true)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  metrics     PerformanceMetrics[]
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades      Trade[]

  @@index([userId, createdAt])
}

model ExternalData {
  id        String   @id @default(cuid())
  source    String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([source, createdAt])
}

model MarketData {
  id        String   @id @default(cuid())
  symbol    String
  price     Float
  volume    Float
  timestamp DateTime
  source    String
  createdAt DateTime @default(now())

  @@index([symbol, timestamp])
  @@index([source, timestamp])
}

model Trade {
  id         String    @id @default(cuid())
  userId     String
  strategyId String?
  symbol     String
  type       String
  amount     Float
  price      Float
  totalValue Float
  status     String
  executedAt DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  strategy   Strategy? @relation(fields: [strategyId], references: [id])
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, executedAt])
  @@index([strategyId, executedAt])
  @@index([symbol, executedAt])
}

model PerformanceMetrics {
  id          String    @id @default(cuid())
  userId      String
  strategyId  String?
  period      String
  startDate   DateTime
  endDate     DateTime
  totalTrades Int
  winRate     Float
  profitLoss  Float
  sharpeRatio Float?
  maxDrawdown Float?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  strategy    Strategy? @relation(fields: [strategyId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, period, startDate])
  @@index([strategyId, period, startDate])
}

model Message {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  threadId  String?
  role      String
  content   String   @db.Text
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
  @@index([threadId, createdAt])
}
